package modelExt;import java.awt.geom.Point2D;import java.io.BufferedWriter;import java.io.FileOutputStream;import java.io.IOException;import java.io.PrintStream;import java.util.ArrayList;import java.util.Collections;import java.util.List;import randomNumbers.AbstractRandom;/** * 一次元酔歩モデルのシミュレーション：連続的な乱数生成器に対応 * * 多数のwalkerを同時に動かす * * @author tadaki */public class SimulationContinuous {    private final List<ContinuousWalker> walkers;//Walkerのリスト    private final AbstractRandom abstractRandom;//乱数生成器    private int n;//walkerの数    /**     * コンストラクタ     *     * @param abstractRandom 乱数生成器     * @param n Wlakerの数     */    public SimulationContinuous(AbstractRandom abstractRandom, int n) {        walkers = Collections.synchronizedList(new ArrayList<>());        this.abstractRandom = abstractRandom;        this.n = n;        // Walkerを初期化        for (int i = 0; i < n; i++) {            walkers.add(new ContinuousWalker(abstractRandom, 0.));        }    }    /**     * 全てのWalkerの情報を消去し、新たにリストを生成     */    public void initialize() {        walkers.clear();        for (int i = 0; i < n; i++) {            walkers.add(new ContinuousWalker(abstractRandom, 0.));        }    }    /**     * 一時間ステップの動作     *     * @return 更新したWalkerの位置の一覧     */    public List<Double> oneStep() {        List<Double> pList = Collections.synchronizedList(new ArrayList<>());        //リストwalkers中の各要素にたいして、移動を行う        //さらに、それぞれの位置をpListに格納する        walkers.stream().map(w -> w.walk()).                forEachOrdered(x -> pList.add(x));        return pList;    }    public List<ContinuousWalker> getWalkers() {        return walkers;    }    public void setN(int n) {        this.n = n;    }    public void generateHistogram(int tmax, String filename) throws IOException {        for (int t = 0; t < tmax; t++) {            oneStep();        }        List<Point2D.Double> plist                = ContinuousPositionHistogram.getHist(getWalkers());        try (PrintStream out                = new PrintStream(new FileOutputStream(filename))) {            for (Point2D.Double q : plist) {                out.println(q.x + " " + q.y);            }        }    }}